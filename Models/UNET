def UNET(start_neurons,input_layer):  
            inputs = tf.keras.Input(input_layer)
            conv1=tf.keras.layers.Conv2D(start_neurons * 1, (3, 3), activation="relu", padding="same")(inputs)
            conv1=tf.keras.layers.Conv2D(start_neurons * 1, (3, 3), activation="relu", padding="same")(conv1)
            pool1=tf.keras.layers.MaxPool2D(pool_size=(2, 2))(conv1)
            pool1=tf.keras.layers.Dropout(0.25)(pool1)
        
            conv2=tf.keras.layers.Conv2D(start_neurons * 2, (3, 3), activation="relu", padding="same")(pool1)
            conv2=tf.keras.layers.Conv2D(start_neurons * 2, (3, 3), activation="relu", padding="same")(conv2)
            pool2=tf.keras.layers.MaxPool2D(pool_size=(2, 2))(conv2)
            pool2=tf.keras.layers.Dropout(0.25)(pool2)
        
            conv3=tf.keras.layers.Conv2D(start_neurons * 4, (3, 3), activation="relu", padding="same")(pool2)
            conv3=tf.keras.layers.Conv2D(start_neurons * 4, (3, 3), activation="relu", padding="same")(conv3)
            pool3=tf.keras.layers.MaxPool2D(pool_size=(2, 2))(conv3)
            pool3=tf.keras.layers.Dropout(0.25)(pool3)
        
            conv4=tf.keras.layers.Conv2D(start_neurons * 8, (3, 3), activation="relu", padding="same")(pool3)
            conv4=tf.keras.layers.Conv2D(start_neurons * 8, (3, 3), activation="relu", padding="same")(conv4)
            pool4=tf.keras.layers.MaxPool2D(pool_size=(2, 2))(conv4)
            pool4=tf.keras.layers.Dropout(0.25)(pool4)
        
            convm=tf.keras.layers.Conv2D(start_neurons * 16, (3, 3), activation="relu", padding="same")(pool4)
            convm=tf.keras.layers.Conv2D(start_neurons * 16, (3, 3), activation="relu", padding="same")(convm)
        
            deconv4=tf.keras.layers.Conv2DTranspose(start_neurons * 8, (3, 3), activation="relu", padding="same")(convm)
            uconv4=tf.keras.layers.concatenate([deconv4, conv4])(deconvm)
            uconv4=tf.keras.layers.Dropout(0.25)(uconv4)
            uconv4=tf.keras.layers.Conv2D(start_neurons * 8, (3, 3), activation="relu", padding="same")(uconv4)
            uconv4=tf.keras.layers.Conv2D(start_neurons * 8, (3, 3), activation="relu", padding="same")(uconv4)
        
            deconv3=tf.keras.layers.Conv2DTranspose(start_neurons * 4, (3, 3), activation="relu", padding="same")(uconv4)
            uconv3=concatenate([deconv4, conv4])(deconv3)
            uconv3=tf.keras.layers.Dropout(0.25)(uconv3)
            uconv3=tf.keras.layers.Conv2D(start_neurons * 4, (3, 3), activation="relu", padding="same")(uconv3)
            uconv3=tf.keras.layers.Conv2D(start_neurons * 4, (3, 3), activation="relu", padding="same")(uconv3)
        
            deconv2=tf.keras.layers.Conv2DTranspose(start_neurons * 2, (3, 3), activation="relu", padding="same")(uconv3)
            uconv2=concatenate([deconv4, conv4])(deconv2)
            uconv2=tf.keras.layers.Dropout(0.25)(uconv3)
            uconv2=tf.keras.layers.Conv2D(start_neurons * 2, (3, 3), activation="relu", padding="same")(uconv2)
            uconv2=tf.keras.layers.Conv2D(start_neurons * 2, (3, 3), activation="relu", padding="same")(uconv2)
        
            deconv1=tf.keras.layers.Conv2DTranspose(start_neurons * 1, (3, 3), activation="relu", padding="same")(uconv2)
            uconv1=tf.keras.layers.concatenate([deconv4, conv4])(deconv1)
            uconv1=tf.keras.layers.Dropout(0.25)(uconv3)
            uconv1=tf.keras.layers.Conv2D(start_neurons * 1, (3, 3), activation="relu", padding="same")(uconv1)
            uconv1=tf.keras.layers.Conv2D(start_neurons * 1, (3, 3), activation="relu", padding="same")(uconv1)
            
            output_layer = Conv2D(1, (1,1), padding="same", activation="sigmoid")(uconv1)
            model = Model(input = inputs, output = uconv1)
            
            return model
